// =============================================================================
// Utility Mixins
// =============================================================================

@mixin bg-gradient($top, $btm, $fallback, $dir: to bottom) {
  background: $fallback;

  @content;

  background: linear-gradient($dir, $top 0%, $btm 100%);
}

@mixin clearfix() {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@function fluid-size($sm, $lg, $narrow, $wide) {
  @if unitless($sm) {
    $sm: $sm * 1px;
  }

  @if unit($narrow) == 'em' {
    $narrow: strip-unit($narrow) * 1rem;
    $wide: strip-unit($wide) * 1rem;
  }

  @if unit($narrow) == 'rem' and unit($sm) == 'px' {
    $sm: rem($sm);
    $lg: rem($lg);
  }

  @if unit($narrow) == 'px' and not (unit($sm) == 'px') {
    $narrow: rem($narrow);
    $wide: rem($wide);
  }

  @return calc(
    (100vw - #{$narrow})
    / #{strip-unit($wide - $narrow)}
    * #{strip-unit($lg - $sm)}
    + #{$sm}
  );
}

// These are taken from Bourbon (and slightly tweaked).
// This hides elements to everyone except screen-readers.
@mixin hide-visually() {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@mixin unhide-visually() {
  clip: auto;
  clip-path: none;
  height: auto;
  overflow: visible;
  position: static;
  white-space: inherit;
  width: auto;
}

@mixin triangle($direction, $width, $height, $color) {
  @if not index(
    "up" "up-right" "right" "down-right" "down" "down-left" "left" "up-left",
    $direction
  ) {
    @error "Direction must be `up`, `up-right`, `right`, `down-right`, " +
      "`down`, `down-left`, `left` or `up-left`.";
  }

  @else {
    content: '';
    width: 0;
    height: 0;
    border-style: solid;

    @if $direction == "up" {
      border-color: transparent transparent $color;
      border-width: 0 ($width / 2) $height;
    }

    @else if $direction == "up-right" {
      border-color: transparent $color transparent transparent;
      border-width: 0 $width $width 0;
    }

    @else if $direction == "right" {
      border-color: transparent transparent transparent $color;
      border-width: ($height / 2) 0 ($height / 2) $width;
    }

    @else if $direction == "down-right" {
      border-color: transparent transparent $color;
      border-width: 0 0 $width $width;
    }

    @else if $direction == "down" {
      border-color: $color transparent transparent;
      border-width: $height ($width / 2) 0;
    }

    @else if $direction == "down-left" {
      border-color: transparent transparent transparent $color;
      border-width: $width 0 0 $width;
    }

    @else if $direction == "left" {
      border-color: transparent $color transparent transparent;
      border-width: ($height / 2) $width ($height / 2) 0;
    }

    @else if $direction == "up-left" {
      border-color: $color transparent transparent;
      border-width: $width $width 0 0;
    }
  }
}
// End Bourbon

// Begin intrinsic ratio size package
@mixin intrinsic-wrapper($width, $height, $chrome: 0) {
  position: relative;
  height: 0;
  padding: $chrome 0 percent($height, $width);
}

@mixin intrinsic-element {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
// End intrinsic ratio size package

@mixin select-css {
  display: block;
  font-size: $base-font-size;
  font-family: sans-serif;
  font-weight: 700;
  color: #444;
  line-height: 1.3;
  padding: 0.6em 1.4em 0.5em 0.8em;
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  margin: 0;
  border: 1px solid #aaa;
  box-shadow: 0 1px 0 1px rgba(0, 0, 0, 0.04);
  border-radius: 0.5em;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  background-color: #fff;
  background-image:
    url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E'),
    linear-gradient(to bottom, #fff 0%, #e5e5e5 100%);
  background-repeat: no-repeat, repeat;
  background-position: right 0.7em top 50%, 0 0;
  background-size: 0.65em auto, 100%;

  &::-ms-expand {
    display: none;
  }

  &:hover {
    border-color: #888;
  }

  &:focus {
    border-color: #aaa;
    box-shadow: 0 0 1px 3px rgba(59, 153, 252, 0.7);
    box-shadow: 0 0 0 3px -moz-mac-focusring;
    color: #222;
    outline: none;
  }

  option {
    font-weight: normal;
  }
}

@mixin select-css-with-label {
  @include select-css;

  display: inline-block;
  width: auto;
}

///
/// This is for when you want your flex items to wrap in a particular way -
/// for example, say you have 3 items side-by-side on desktop which stack at
/// 100% width on mobile -- but tablet does some weird combination of the two.
/// So instead of writing an imprecise media query to set a breakpoint (or
/// transition point), use this on the flex container to transition based on the
/// *container's* width.
///
/// This code was based first on:
/// http://www.heydonworks.com/article/the-flexbox-holy-albatross
/// and then updated based on:
/// http://www.heydonworks.com/article/the-flexbox-holy-albatross-reincarnated
/// by a commenter whose code is located at:
/// https://codepen.io/perpetualgrimace/pen/XOKzzo?editors=1100
///
@mixin container-query ($maxWidth: 400px, $margin: 1rem) {
  display: flex;
  flex-wrap: wrap;
  margin: -$margin;

  & > * {
    flex-grow: 1;
    width: 100%; /* fallback */
    flex-basis: calc((#{$maxWidth} * 999.999) - (100% * 999.999));
    margin: $margin;
  }
}
