// Box shadow package
$PI: 3.141592653589793;

// Returns the cosine of a number.
// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.
// @example
//     cos(0.7854) // 0.70711
//     cos(45deg)  // 0.70711
@function cos($x) {
  $x: (rad($x) / 1rad) % ($PI * 2);
  $ret: 1;
  $i: 1;

  @for $n from 1 to 24 {
    $i: $i * -1 * $x * $x / (2 * $n) / (2 * $n - 1);
    $ret: $ret + $i;
  }

  @return $ret;
}

// Returns the sine of a number.
// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.
// @example
//     sin(1.0472) // 0.86603
//     sin(60deg)  // 0.86603
@function sin($x) {
  $x: (rad($x) / 1rad);

  @return cos($x - $PI / 2);
}

@function percent-to-dec($number) {
  @return if(unit($number)=='%', $number / 100%, $number);
}

// parameter order here is the same as the properties in photoshop
@mixin ps-box-shadow($color: #000000, $opacity: 0.5, $angle: 0, $dist: 0, $spread: 0, $size: 0, $inset: false) {
  $inset: if($inset, 'inset ', '');
  $opacity: percent-to-dec($opacity);
  $color: if($opacity==1, $color, rgba($color, $opacity));
  $spread: $size * percent-to-dec($spread);
  $blur: $size - $spread;

  $angle: 180 - strip-unit($angle) * 1deg;
  $dist-x: strip-zero(round(cos($angle) * $dist));
  $dist-y: strip-zero(round(sin($angle) * $dist));

  $output: $dist-x $dist-y;

  @if $spread !=0 {
    $output: $output $blur $spread;
  }

  @else if $size !=0 {
    $output: $output $blur;
  }

  box-shadow: #{$inset}#{$output} $color;
}

// changes parameter order to allow setting the most common values without naming params
@mixin ps-box-shadow-quick($opacity: 0.5, $angle: 0, $dist: 0, $size: 0, $color: #000000, $spread: 0, $inset: false) {
  @include ps-box-shadow($color, $opacity, $angle, $dist, $spread, $size, $inset);
}
